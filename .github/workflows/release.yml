name: Build and Release

on:
  push:
    tags:
      - 'v*' # Triggers on version tags like v1.0.0, v1.2.3, etc.
  workflow_dispatch: # Allows manual triggering from GitHub UI

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Debug - Check files before build
      run: |
        echo "=== Current directory ==="
        pwd
        echo "=== Project files ==="
        dir
        echo "=== Package.json exists? ==="
        if (Test-Path "package.json") { echo "‚úÖ package.json found" } else { echo "‚ùå package.json missing" }
        echo "=== Main.js exists? ==="
        if (Test-Path "main.js") { echo "‚úÖ main.js found" } else { echo "‚ùå main.js missing" }
        echo "=== Preload.js exists? ==="
        if (Test-Path "preload.js") { echo "‚úÖ preload.js found" } else { echo "‚ùå preload.js missing" }
        echo "=== Src folder exists? ==="
        if (Test-Path "src") { echo "‚úÖ src folder found"; dir src } else { echo "‚ùå src folder missing" }
        echo "=== Assets folder exists? ==="
        if (Test-Path "assets") { echo "‚úÖ assets folder found"; dir assets } else { echo "‚ùå assets folder missing" }
      shell: powershell
        
    - name: Build Windows Installer
      run: |
        echo "Building Windows installer..."
        npx electron-builder --win nsis --publish never --config.directories.output=dist
      continue-on-error: true
      
    - name: Build Portable Version
      run: |
        echo "Building portable version..."
        npx electron-builder --win portable --publish never --config.directories.output=dist
      continue-on-error: true
        
    - name: Debug - Check build results
      run: |
        echo "=== Current directory after build ==="
        pwd
        echo "=== All folders ==="
        dir
        echo "=== Dist folder exists? ==="
        if (Test-Path "dist") {
          echo "‚úÖ Dist folder found"
          echo "=== Dist folder contents (recursive) ==="
          Get-ChildItem -Path dist -Recurse | ForEach-Object {
            if ($_.PSIsContainer) {
              Write-Host "üìÅ $($_.FullName)" -ForegroundColor Blue
            } else {
              Write-Host "üìÑ $($_.FullName) ($([math]::Round($_.Length/1MB, 2)) MB)" -ForegroundColor Green
            }
          }
          
          echo "=== Looking specifically for .exe files ==="
          $exeFiles = Get-ChildItem -Path dist -Recurse -Filter "*.exe"
          if ($exeFiles) {
            $exeFiles | ForEach-Object { Write-Host "üéØ Found: $($_.FullName)" -ForegroundColor Yellow }
          } else {
            echo "‚ùå No .exe files found anywhere in dist"
          }
          
          echo "=== Looking for .yml files ==="
          $ymlFiles = Get-ChildItem -Path dist -Recurse -Filter "*.yml"
          if ($ymlFiles) {
            $ymlFiles | ForEach-Object { Write-Host "üìã Found: $($_.FullName)" -ForegroundColor Cyan }
          } else {
            echo "‚ùå No .yml files found"
          }
        } else {
          echo "‚ùå No dist folder found!"
          echo "=== Let's check for alternative locations ==="
          dir -Recurse | Where-Object {$_.Name -like "*.exe"}
        }
      shell: powershell
        
    - name: Upload Build Artifacts (All Files)
      uses: actions/upload-artifact@v4
      with:
        name: timetracking-build-debug
        path: |
          dist/
          **/*.exe
          **/*.yml
        retention-days: 30
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/**/*.exe
          dist/**/*.yml
        body: |
          ## üéâ Time Tracking App Release ${{ github.ref_name }}
          
          ### üì• Downloads
          
          **Windows Installer (Recommended)**
          - `TimeTracking-Setup.exe` - Fast startup, includes desktop shortcut and start menu entry
          
          **Portable Version**
          - `TimeTracking-Portable.exe` - No installation required, can run from USB drive
          
          ### ‚ö° Features
          - Global keyboard shortcuts (Ctrl+1-9)
          - Bulletproof timer that works through screen locks
          - Smart project management with soft delete
          - Weekly overview and CSV export
          - Auto-save functionality
          
          ### üöÄ Getting Started
          1. Download the installer or portable version
          2. Run the application
          3. Create your first project in the Projects tab
          4. Start tracking time with Ctrl+1-9 shortcuts!
          
          ### üìä Data Storage
          - Database location: `Documents/TimeTracking/timetracking.db`
          - Easily portable and backup-friendly
          
          ---
          
          *Built with Electron and vibe-coded with Claude AI assistance* ü§ñ
        draft: false
        prerelease: false
        generate_release_notes: true
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}